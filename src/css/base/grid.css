:root {
    --columns: 6;
    --gutter: 0;
    --container-width: 38rem;
}

.container {
    margin: 0 auto;
    max-width: var(--container-width);
}

/*Grid box*/
.grid {
    display: flex;
    flex-direction: column;
}

.grid__row {
    display: flex;
    height: 100%;
}

.grid__row--horizontal {
    flex-direction: column;
}

.grid__row--vertical {
    flex-direction: row;
}

.grid__box {
    margin: var(--gutter);
    position: relative;
    flex: 1;
}

/*Quitamos el margin a los elementos hijos*/
.grid__row--no-gutter > .grid__box {
    margin: 0;
}

/*Esto hace que se generen los elementos manteniendo un ratio aspecto de 1:1*/
.grid__box:before {
    content: "";
    display: block;
    padding-top: 100%;
}

/*Necesitamos resetear el padding-top de los elementos dentro de un .grid__row--horizontal para que sus hijos se ajusten a la caja padre*/
.grid__row--horizontal > .grid__box:before {
    padding-top: 0%;
}

/*Debido a que aplicamos un padding-top al elemento padre tenemos que resetear la posici√≥n del contenido para que no tenga en cuenta ese padding-top*/
.grid__box__content {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;

    /*Facilita debuggear*/
    /*border: 1px solid red;*/
}

/*Grid normal*/
.row {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
}

*[class^="col"] {
    margin: var(--gutter);
    width: 100%;
}

.m-hide { 
    display: none; 
}

.t-hide {
    display: block;
}

.d-hide {
    display: block;
}

/*Tablet*/
@media (min-width: 600px) {
    .m-hide { display: block; }
    .t-hide { display: none; }
    .d-hide { display: block; }

    .col-t-1 { width: calc((100% * 1 / var(--columns)) - (var(--gutter)) * 2); }
    .col-t-2 { width: calc((100% * 2 / var(--columns)) - (var(--gutter)) * 2); }
    .col-t-3 { width: calc((100% * 3 / var(--columns)) - (var(--gutter)) * 2); }
    .col-t-4 { width: calc((100% * 4 / var(--columns)) - (var(--gutter)) * 2); }
    .col-t-5 { width: calc((100% * 5 / var(--columns)) - (var(--gutter)) * 2); }
    .col-t-6 { width: calc((100% * 6 / var(--columns)) - (var(--gutter)) * 2); }
    .col-t-7 { width: calc((100% * 7 / var(--columns)) - (var(--gutter)) * 2); }
    .col-t-8 { width: calc((100% * 8 / var(--columns)) - (var(--gutter)) * 2); }
    .col-t-9 { width: calc((100% * 9 / var(--columns)) - (var(--gutter)) * 2); }
    .col-t-10 { width: calc((100% * 10 / var(--columns)) - (var(--gutter)) * 2); }
    .col-t-11 { width: calc((100% * 11 / var(--columns)) - (var(--gutter)) * 2); }
    .col-t-12 { width: calc((100% * 12 / var(--columns)) - (var(--gutter)) * 2); }
}

/*Desktop*/
@media (min-width: 800px) {
    .m-hide { display: block; }
    .t-hide { display: block; }
    .d-hide { display: none; }

    .col-1 { width: calc((100% * 1 / var(--columns)) - (var(--gutter)) * 2); }
    .col-2 { width: calc((100% * 2 / var(--columns)) - (var(--gutter)) * 2); }
    .col-3 { width: calc((100% * 3 / var(--columns)) - (var(--gutter)) * 2); }
    .col-4 { width: calc((100% * 4 / var(--columns)) - (var(--gutter)) * 2); }
    .col-5 { width: calc((100% * 5 / var(--columns)) - (var(--gutter)) * 2); }
    .col-6 { width: calc((100% * 6 / var(--columns)) - (var(--gutter)) * 2); }
    .col-7 { width: calc((100% * 7 / var(--columns)) - (var(--gutter)) * 2); }
    .col-8 { width: calc((100% * 8 / var(--columns)) - (var(--gutter)) * 2); }
    .col-9 { width: calc((100% * 9 / var(--columns)) - (var(--gutter)) * 2); }
    .col-10 { width: calc((100% * 10 / var(--columns)) - (var(--gutter)) * 2); }
    .col-11 { width: calc((100% * 11 / var(--columns)) - (var(--gutter)) * 2); }
    .col-12 { width: calc((100% * 12 / var(--columns)) - (var(--gutter)) * 2); }
}
